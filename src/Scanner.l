%{
    #include "Parser.h" /* Parser file generated by Bison */
    #include "ErrorLogger.h"
    #include "TreeNode.h"
    #include <string>
    #include <cstring>

    extern ErrorLogger* ERROR_LOGGER;
    extern int yylineno;
%}

%option nounput noinput noyywrap nodefault yylineno

id ([a-z|A-Z][a-z|A-Z|_|0-9]*)
dec ([0-9]+\.[0-9]+)
num ([0-9]+)
text ([\"][^\"]*[\"])
comment ([#][^\n]*)

%%
{comment}           {yylval.string = new char[yyleng+1]; strcpy(yylval.string, yytext); return T_COMMENT;}
[ ]                 {return T_SP;}
\t                  {return T_TAB;}

"toc"               {return T_TOC;}
"print"             {return T_PRINT;}
"ret"               {return T_RETURN;}

"boo"               {yylval.integer = Data::BOO; return T_BOO;}
"flt"               {yylval.integer = Data::FLT; return T_FLT;}
"int"               {yylval.integer = Data::INT; return T_INT;}
"str"               {yylval.integer = Data::STR; return T_STR;}
"void"              {yylval.integer = Data::VOID; return T_VOID;}

"if"                {return T_IF;}
"else"              {return T_ELSE;}

"for"               {return T_FOR;}
"in"                {return T_IN;}

"true"              {return T_TRUE;}
"false"             {return T_FALSE;}

"+"                 {return T_PLUS;}
"-"                 {return T_MINUS;}
\*                  {return T_TIMES;}
"/"                 {return T_DIVIDE;}
"mod"               {return T_MOD;}

">"                 {return T_GREATER;}
">="                {return T_GREATER_E;}
"<"                 {return T_LOWER;}
"<="                {return T_LOWER_E;}
"=="                {return T_EQUAL;}
"!="                {return T_DIFF;}

"not"               {return T_NOT;}
"and"               {return T_AND;}
"or"                {return T_OR;}

{text}              {yylval.string = new char[yyleng+1]; strcpy(yylval.string, yytext); return T_TEXT;}
{dec}               {yylval.decimal = std::stof(yytext); return T_DEC;}
{num}               {yylval.integer = std::atoi(yytext); return T_NUM;}
{id}                {yylval.string = new char[yyleng+1]; strcpy(yylval.string, yytext); return T_ID;}

"("                 {return T_OPAR;}
")"                 {return T_CPAR;}
"["                 {return T_OBRACKET;}
"]"                 {return T_CBRACKET;}
"{"                 {return T_OBRACE;}
"}"                 {return T_CBRACE;}
","                 {return T_COMMA;}
";"                 {return T_SCOLON;}
"="                 {return T_ASSIGN;}
\n                  {return T_NL;} /* New line */

[^0-9\.a-zA-Z_'+''-''*''/',''='#\\\"\t\n \[\]\(\)\{\}]+                   {ERROR_LOGGER->log(ErrorLogger::LEXICAL, "Unknown symbol " + std::string(yytext) + ".");}

%%
